/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AdminUpdateUserNameDTO,
  NeutralizeEmailActionResponseResponseWrapper,
  PermissionDTOListResponseWrapper,
  RequestEmailActionResponseResponseWrapper,
  UserDTO,
  UserDTOListResponseWrapper,
  UserDTOResponseWrapper,
} from "../models/index";
import {
  AdminUpdateUserNameDTOFromJSON,
  AdminUpdateUserNameDTOToJSON,
  NeutralizeEmailActionResponseResponseWrapperFromJSON,
  NeutralizeEmailActionResponseResponseWrapperToJSON,
  PermissionDTOListResponseWrapperFromJSON,
  PermissionDTOListResponseWrapperToJSON,
  RequestEmailActionResponseResponseWrapperFromJSON,
  RequestEmailActionResponseResponseWrapperToJSON,
  UserDTOFromJSON,
  UserDTOToJSON,
  UserDTOListResponseWrapperFromJSON,
  UserDTOListResponseWrapperToJSON,
  UserDTOResponseWrapperFromJSON,
  UserDTOResponseWrapperToJSON,
} from "../models/index";

export interface ApiUserManagementChangeEmailRequestPostRequest {
  userId?: string;
  newEmail?: string;
}

export interface ApiUserManagementDeleteAccountRequestPostRequest {
  userId?: string;
}

export interface ApiUserManagementDeleteUserPostRequest {
  id?: string;
}

export interface ApiUserManagementDisableUserPostRequest {
  id?: string;
}

export interface ApiUserManagementEnableUserPostRequest {
  id?: string;
}

export interface ApiUserManagementFetchUsersGetRequest {
  match?: string;
  skip?: number;
  take?: number;
}

export interface ApiUserManagementForceUnVerifyEmailPostRequest {
  id?: string;
}

export interface ApiUserManagementForceVerifyEmailPostRequest {
  id?: string;
}

export interface ApiUserManagementNeutralizeEmailActionPostRequest {
  id?: string;
}

export interface ApiUserManagementPasswordResetRequestPostRequest {
  userId?: string;
}

export interface ApiUserManagementRevokeAllUserSessionsPostRequest {
  id?: string;
}

export interface ApiUserManagementSetUserEmailPostRequest {
  id?: string;
  email?: string;
}

export interface ApiUserManagementSetUserPasswordPostRequest {
  id?: string;
  password?: string;
}

export interface ApiUserManagementUpdatePermissionsPostRequest {
  userDTO?: UserDTO;
}

export interface ApiUserManagementUpdateUserNamePostRequest {
  adminUpdateUserNameDTO?: AdminUpdateUserNameDTO;
}

export interface ApiUserManagementVerifyEmailRequestPostRequest {
  userId?: string;
}

/**
 *
 */
export class UserManagementApi extends runtime.BaseAPI {
  /**
   */
  async apiUserManagementChangeEmailRequestPostRaw(
    requestParameters: ApiUserManagementChangeEmailRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["userId"] = requestParameters["userId"];
    }

    if (requestParameters["newEmail"] != null) {
      queryParameters["newEmail"] = requestParameters["newEmail"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/changeEmailRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementChangeEmailRequestPost(
    requestParameters: ApiUserManagementChangeEmailRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiUserManagementChangeEmailRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementDeleteAccountRequestPostRaw(
    requestParameters: ApiUserManagementDeleteAccountRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["userId"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/deleteAccountRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementDeleteAccountRequestPost(
    requestParameters: ApiUserManagementDeleteAccountRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiUserManagementDeleteAccountRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementDeleteUserPostRaw(
    requestParameters: ApiUserManagementDeleteUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/deleteUser`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementDeleteUserPost(
    requestParameters: ApiUserManagementDeleteUserPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementDeleteUserPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementDisableUserPostRaw(
    requestParameters: ApiUserManagementDisableUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/disableUser`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementDisableUserPost(
    requestParameters: ApiUserManagementDisableUserPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementDisableUserPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementEnableUserPostRaw(
    requestParameters: ApiUserManagementEnableUserPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/enableUser`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementEnableUserPost(
    requestParameters: ApiUserManagementEnableUserPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementEnableUserPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementFetchPermissionsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PermissionDTOListResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/fetchPermissions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PermissionDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementFetchPermissionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionDTOListResponseWrapper> {
    const response = await this.apiUserManagementFetchPermissionsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementFetchUsersGetRaw(
    requestParameters: ApiUserManagementFetchUsersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOListResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["match"] != null) {
      queryParameters["match"] = requestParameters["match"];
    }

    if (requestParameters["skip"] != null) {
      queryParameters["skip"] = requestParameters["skip"];
    }

    if (requestParameters["take"] != null) {
      queryParameters["take"] = requestParameters["take"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/fetchUsers`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementFetchUsersGet(
    requestParameters: ApiUserManagementFetchUsersGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOListResponseWrapper> {
    const response = await this.apiUserManagementFetchUsersGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementForceUnVerifyEmailPostRaw(
    requestParameters: ApiUserManagementForceUnVerifyEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/forceUnVerifyEmail`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementForceUnVerifyEmailPost(
    requestParameters: ApiUserManagementForceUnVerifyEmailPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementForceUnVerifyEmailPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementForceVerifyEmailPostRaw(
    requestParameters: ApiUserManagementForceVerifyEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/forceVerifyEmail`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementForceVerifyEmailPost(
    requestParameters: ApiUserManagementForceVerifyEmailPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementForceVerifyEmailPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementNeutralizeEmailActionPostRaw(
    requestParameters: ApiUserManagementNeutralizeEmailActionPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NeutralizeEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/neutralizeEmailAction`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => NeutralizeEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementNeutralizeEmailActionPost(
    requestParameters: ApiUserManagementNeutralizeEmailActionPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NeutralizeEmailActionResponseResponseWrapper> {
    const response = await this.apiUserManagementNeutralizeEmailActionPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementPasswordResetRequestPostRaw(
    requestParameters: ApiUserManagementPasswordResetRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["userId"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/passwordResetRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementPasswordResetRequestPost(
    requestParameters: ApiUserManagementPasswordResetRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiUserManagementPasswordResetRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementRevokeAllUserSessionsPostRaw(
    requestParameters: ApiUserManagementRevokeAllUserSessionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/revokeAllUserSessions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementRevokeAllUserSessionsPost(
    requestParameters: ApiUserManagementRevokeAllUserSessionsPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementRevokeAllUserSessionsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementSetUserEmailPostRaw(
    requestParameters: ApiUserManagementSetUserEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/setUserEmail`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementSetUserEmailPost(
    requestParameters: ApiUserManagementSetUserEmailPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementSetUserEmailPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementSetUserPasswordPostRaw(
    requestParameters: ApiUserManagementSetUserPasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["password"] != null) {
      queryParameters["password"] = requestParameters["password"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/setUserPassword`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementSetUserPasswordPost(
    requestParameters: ApiUserManagementSetUserPasswordPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementSetUserPasswordPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementUpdatePermissionsPostRaw(
    requestParameters: ApiUserManagementUpdatePermissionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/UserManagement/updatePermissions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserDTOToJSON(requestParameters["userDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementUpdatePermissionsPost(
    requestParameters: ApiUserManagementUpdatePermissionsPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementUpdatePermissionsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementUpdateUserNamePostRaw(
    requestParameters: ApiUserManagementUpdateUserNamePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/UserManagement/updateUserName`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AdminUpdateUserNameDTOToJSON(requestParameters["adminUpdateUserNameDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementUpdateUserNamePost(
    requestParameters: ApiUserManagementUpdateUserNamePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserManagementUpdateUserNamePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserManagementVerifyEmailRequestPostRaw(
    requestParameters: ApiUserManagementVerifyEmailRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["userId"] != null) {
      queryParameters["userId"] = requestParameters["userId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/UserManagement/verifyEmailRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserManagementVerifyEmailRequestPost(
    requestParameters: ApiUserManagementVerifyEmailRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiUserManagementVerifyEmailRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
