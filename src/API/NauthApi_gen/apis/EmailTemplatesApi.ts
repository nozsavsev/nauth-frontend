/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateEmailTemplateDTO,
  EmailTemplateDTO,
  EmailTemplateDTOListResponseWrapper,
  EmailTemplateDTOResponseWrapper,
  StringResponseWrapper,
} from "../models/index";
import {
  CreateEmailTemplateDTOFromJSON,
  CreateEmailTemplateDTOToJSON,
  EmailTemplateDTOFromJSON,
  EmailTemplateDTOToJSON,
  EmailTemplateDTOListResponseWrapperFromJSON,
  EmailTemplateDTOListResponseWrapperToJSON,
  EmailTemplateDTOResponseWrapperFromJSON,
  EmailTemplateDTOResponseWrapperToJSON,
  StringResponseWrapperFromJSON,
  StringResponseWrapperToJSON,
} from "../models/index";

export interface ApiEmailTemplatesDeleteRequest {
  id?: string;
}

export interface ApiEmailTemplatesIdGetRequest {
  id: string;
}

export interface ApiEmailTemplatesPostRequest {
  createEmailTemplateDTO?: CreateEmailTemplateDTO;
}

export interface ApiEmailTemplatesPutRequest {
  emailTemplateDTO?: EmailTemplateDTO;
}

/**
 *
 */
export class EmailTemplatesApi extends runtime.BaseAPI {
  /**
   */
  async apiEmailTemplatesAllGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmailTemplateDTOListResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailTemplates/all`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailTemplatesAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplateDTOListResponseWrapper> {
    const response = await this.apiEmailTemplatesAllGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailTemplatesDeleteRaw(
    requestParameters: ApiEmailTemplatesDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailTemplates`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailTemplatesDelete(
    requestParameters: ApiEmailTemplatesDeleteRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiEmailTemplatesDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailTemplatesIdGetRaw(
    requestParameters: ApiEmailTemplatesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmailTemplateDTOResponseWrapper>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling apiEmailTemplatesIdGet().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailTemplates/{id}`;
    urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailTemplatesIdGet(
    requestParameters: ApiEmailTemplatesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EmailTemplateDTOResponseWrapper> {
    const response = await this.apiEmailTemplatesIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailTemplatesPostRaw(
    requestParameters: ApiEmailTemplatesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmailTemplateDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/EmailTemplates`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateEmailTemplateDTOToJSON(requestParameters["createEmailTemplateDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailTemplatesPost(
    requestParameters: ApiEmailTemplatesPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EmailTemplateDTOResponseWrapper> {
    const response = await this.apiEmailTemplatesPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailTemplatesPutRaw(
    requestParameters: ApiEmailTemplatesPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmailTemplateDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/EmailTemplates`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: EmailTemplateDTOToJSON(requestParameters["emailTemplateDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailTemplatesPut(
    requestParameters: ApiEmailTemplatesPutRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EmailTemplateDTOResponseWrapper> {
    const response = await this.apiEmailTemplatesPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
