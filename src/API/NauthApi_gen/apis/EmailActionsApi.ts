/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ApplyEmailActionResponseResponseWrapper,
  DecodedEmailActionDTOResponseWrapper,
  EmailActionDTOListResponseWrapper,
  NeutralizeEmailActionResponseResponseWrapper,
  RequestEmailActionResponseResponseWrapper,
} from "../models/index";
import {
  ApplyEmailActionResponseResponseWrapperFromJSON,
  ApplyEmailActionResponseResponseWrapperToJSON,
  DecodedEmailActionDTOResponseWrapperFromJSON,
  DecodedEmailActionDTOResponseWrapperToJSON,
  EmailActionDTOListResponseWrapperFromJSON,
  EmailActionDTOListResponseWrapperToJSON,
  NeutralizeEmailActionResponseResponseWrapperFromJSON,
  NeutralizeEmailActionResponseResponseWrapperToJSON,
  RequestEmailActionResponseResponseWrapperFromJSON,
  RequestEmailActionResponseResponseWrapperToJSON,
} from "../models/index";

export interface ApiEmailActionsApplyEmailRequestPostRequest {
  token?: string;
}

export interface ApiEmailActionsChangeEmailApplyPostRequest {
  token?: string;
}

export interface ApiEmailActionsChangeEmailRequestPostRequest {
  newEmail?: string;
}

export interface ApiEmailActionsDecodeApplyTokenPostRequest {
  token?: string;
}

export interface ApiEmailActionsDeleteAccountApplyPostRequest {
  token?: string;
}

export interface ApiEmailActionsEmailSignInRequestPostRequest {
  email?: string;
}

export interface ApiEmailActionsNeutralizeEmailActionPostRequest {
  id?: string;
}

export interface ApiEmailActionsPasswordResetApplyPostRequest {
  token?: string;
  password?: string;
}

export interface ApiEmailActionsPasswordResetRequestPostRequest {
  email?: string;
}

/**
 *
 */
export class EmailActionsApi extends runtime.BaseAPI {
  /**
   */
  async apiEmailActionsApplyEmailRequestPostRaw(
    requestParameters: ApiEmailActionsApplyEmailRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ApplyEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/applyEmailRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ApplyEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsApplyEmailRequestPost(
    requestParameters: ApiEmailActionsApplyEmailRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ApplyEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsApplyEmailRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsChangeEmailApplyPostRaw(
    requestParameters: ApiEmailActionsChangeEmailApplyPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ApplyEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/changeEmailApply`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ApplyEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsChangeEmailApplyPost(
    requestParameters: ApiEmailActionsChangeEmailApplyPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ApplyEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsChangeEmailApplyPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsChangeEmailRequestPostRaw(
    requestParameters: ApiEmailActionsChangeEmailRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["newEmail"] != null) {
      queryParameters["newEmail"] = requestParameters["newEmail"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/changeEmailRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsChangeEmailRequestPost(
    requestParameters: ApiEmailActionsChangeEmailRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsChangeEmailRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsDecodeApplyTokenPostRaw(
    requestParameters: ApiEmailActionsDecodeApplyTokenPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DecodedEmailActionDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/decodeApplyToken`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => DecodedEmailActionDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsDecodeApplyTokenPost(
    requestParameters: ApiEmailActionsDecodeApplyTokenPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DecodedEmailActionDTOResponseWrapper> {
    const response = await this.apiEmailActionsDecodeApplyTokenPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsDeleteAccountApplyPostRaw(
    requestParameters: ApiEmailActionsDeleteAccountApplyPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ApplyEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/deleteAccountApply`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ApplyEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsDeleteAccountApplyPost(
    requestParameters: ApiEmailActionsDeleteAccountApplyPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ApplyEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsDeleteAccountApplyPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsDeleteAccountRequestPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/deleteAccountRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsDeleteAccountRequestPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsDeleteAccountRequestPostRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsEmailCodeRequestPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/emailCodeRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsEmailCodeRequestPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsEmailCodeRequestPostRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsEmailSignInRequestPostRaw(
    requestParameters: ApiEmailActionsEmailSignInRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/emailSignInRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsEmailSignInRequestPost(
    requestParameters: ApiEmailActionsEmailSignInRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsEmailSignInRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsGetAllByUserIdGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmailActionDTOListResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/getAllByUserId`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmailActionDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsGetAllByUserIdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailActionDTOListResponseWrapper> {
    const response = await this.apiEmailActionsGetAllByUserIdGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsNeutralizeEmailActionPostRaw(
    requestParameters: ApiEmailActionsNeutralizeEmailActionPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NeutralizeEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/neutralizeEmailAction`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => NeutralizeEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsNeutralizeEmailActionPost(
    requestParameters: ApiEmailActionsNeutralizeEmailActionPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NeutralizeEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsNeutralizeEmailActionPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsPasswordResetApplyPostRaw(
    requestParameters: ApiEmailActionsPasswordResetApplyPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ApplyEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    if (requestParameters["password"] != null) {
      queryParameters["password"] = requestParameters["password"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/passwordResetApply`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ApplyEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsPasswordResetApplyPost(
    requestParameters: ApiEmailActionsPasswordResetApplyPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ApplyEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsPasswordResetApplyPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsPasswordResetRequestPostRaw(
    requestParameters: ApiEmailActionsPasswordResetRequestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/passwordResetRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsPasswordResetRequestPost(
    requestParameters: ApiEmailActionsPasswordResetRequestPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsPasswordResetRequestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiEmailActionsVerifyEmailRequestPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RequestEmailActionResponseResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/EmailActions/verifyEmailRequest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => RequestEmailActionResponseResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiEmailActionsVerifyEmailRequestPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RequestEmailActionResponseResponseWrapper> {
    const response = await this.apiEmailActionsVerifyEmailRequestPostRaw(initOverrides);
    return await response.value();
  }
}
