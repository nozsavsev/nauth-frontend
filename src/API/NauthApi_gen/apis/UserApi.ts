/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateUserDTO,
  Model2FAEntrySetupDTOResponseWrapper,
  StringResponseWrapper,
  UpdateNameDTO,
  UserDTOResponseWrapper,
} from "../models/index";
import {
  CreateUserDTOFromJSON,
  CreateUserDTOToJSON,
  Model2FAEntrySetupDTOResponseWrapperFromJSON,
  Model2FAEntrySetupDTOResponseWrapperToJSON,
  StringResponseWrapperFromJSON,
  StringResponseWrapperToJSON,
  UpdateNameDTOFromJSON,
  UpdateNameDTOToJSON,
  UserDTOResponseWrapperFromJSON,
  UserDTOResponseWrapperToJSON,
} from "../models/index";

export interface ApiUserActivate2FAPostRequest {
  code?: string;
  _2faId?: string;
}

export interface ApiUserActivateSessionPostRequest {
  code?: string;
}

export interface ApiUserContinueWithGoogleGetRequest {
  googleAccessToken?: string;
}

export interface ApiUserDelete2FAWithCodePostRequest {
  code?: string;
  _2faId?: string;
}

export interface ApiUserDelete2FAWithRecoveryCodePostRequest {
  code?: string;
}

export interface ApiUserLoginPostRequest {
  createUserDTO?: CreateUserDTO;
}

export interface ApiUserLoginWithCodePostRequest {
  email?: string;
  code?: string;
}

export interface ApiUserRegisterPostRequest {
  createUserDTO?: CreateUserDTO;
}

export interface ApiUserSetup2FAPostRequest {
  code?: string;
  name?: string;
}

export interface ApiUserUpdateUserNamePostRequest {
  updateNameDTO?: UpdateNameDTO;
}

export interface ApiUserUploadAvatarPostRequest {
  file?: Blob;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   */
  async apiUserActivate2FAPostRaw(
    requestParameters: ApiUserActivate2FAPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    if (requestParameters["_2faId"] != null) {
      queryParameters["_2faId"] = requestParameters["_2faId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/activate2FA`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserActivate2FAPost(
    requestParameters: ApiUserActivate2FAPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiUserActivate2FAPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserActivateSessionPostRaw(
    requestParameters: ApiUserActivateSessionPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Model2FAEntrySetupDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/activateSession`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Model2FAEntrySetupDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserActivateSessionPost(
    requestParameters: ApiUserActivateSessionPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Model2FAEntrySetupDTOResponseWrapper> {
    const response = await this.apiUserActivateSessionPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserContinueWithGoogleGetRaw(
    requestParameters: ApiUserContinueWithGoogleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["googleAccessToken"] != null) {
      queryParameters["GoogleAccessToken"] = requestParameters["googleAccessToken"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/ContinueWithGoogle`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserContinueWithGoogleGet(
    requestParameters: ApiUserContinueWithGoogleGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiUserContinueWithGoogleGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserCurrentUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/currentUser`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserCurrentUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserCurrentUserGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserDelete2FAWithCodePostRaw(
    requestParameters: ApiUserDelete2FAWithCodePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Model2FAEntrySetupDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    if (requestParameters["_2faId"] != null) {
      queryParameters["_2faId"] = requestParameters["_2faId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/delete2FAWithCode`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Model2FAEntrySetupDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserDelete2FAWithCodePost(
    requestParameters: ApiUserDelete2FAWithCodePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Model2FAEntrySetupDTOResponseWrapper> {
    const response = await this.apiUserDelete2FAWithCodePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserDelete2FAWithRecoveryCodePostRaw(
    requestParameters: ApiUserDelete2FAWithRecoveryCodePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Model2FAEntrySetupDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/delete2FAWithRecoveryCode`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Model2FAEntrySetupDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserDelete2FAWithRecoveryCodePost(
    requestParameters: ApiUserDelete2FAWithRecoveryCodePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Model2FAEntrySetupDTOResponseWrapper> {
    const response = await this.apiUserDelete2FAWithRecoveryCodePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserLoginPostRaw(
    requestParameters: ApiUserLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/User/login`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserDTOToJSON(requestParameters["createUserDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserLoginPost(
    requestParameters: ApiUserLoginPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiUserLoginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserLoginWithCodePostRaw(
    requestParameters: ApiUserLoginWithCodePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["email"] != null) {
      queryParameters["email"] = requestParameters["email"];
    }

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/loginWithCode`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserLoginWithCodePost(
    requestParameters: ApiUserLoginWithCodePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiUserLoginWithCodePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserRegisterPostRaw(
    requestParameters: ApiUserRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/User/register`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserDTOToJSON(requestParameters["createUserDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserRegisterPost(
    requestParameters: ApiUserRegisterPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserRegisterPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserSetup2FAPostRaw(
    requestParameters: ApiUserSetup2FAPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Model2FAEntrySetupDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["code"] != null) {
      queryParameters["code"] = requestParameters["code"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/User/setup2FA`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => Model2FAEntrySetupDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserSetup2FAPost(
    requestParameters: ApiUserSetup2FAPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Model2FAEntrySetupDTOResponseWrapper> {
    const response = await this.apiUserSetup2FAPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserUpdateUserNamePostRaw(
    requestParameters: ApiUserUpdateUserNamePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/User/updateUserName`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateNameDTOToJSON(requestParameters["updateNameDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserUpdateUserNamePost(
    requestParameters: ApiUserUpdateUserNamePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserUpdateUserNamePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiUserUploadAvatarPostRaw(
    requestParameters: ApiUserUploadAvatarPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    let urlPath = `/api/User/uploadAvatar`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiUserUploadAvatarPost(
    requestParameters: ApiUserUploadAvatarPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDTOResponseWrapper> {
    const response = await this.apiUserUploadAvatarPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
