/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateServiceDTO, ServiceDTOListResponseWrapper, ServiceDTOResponseWrapper, StringResponseWrapper } from "../models/index";
import {
  CreateServiceDTOFromJSON,
  CreateServiceDTOToJSON,
  ServiceDTOListResponseWrapperFromJSON,
  ServiceDTOListResponseWrapperToJSON,
  ServiceDTOResponseWrapperFromJSON,
  ServiceDTOResponseWrapperToJSON,
  StringResponseWrapperFromJSON,
  StringResponseWrapperToJSON,
} from "../models/index";

export interface ApiServiceCreatePostRequest {
  createServiceDTO?: CreateServiceDTO;
}

export interface ApiServiceDeletePostRequest {
  id?: string;
}

export interface ApiServiceGetSessionPostRequest {
  serviceId?: string;
  expiresAt?: Date;
}

export interface ApiServiceGetbyIdGetRequest {
  serviceId?: string;
}

export interface ApiServiceUpdatePostRequest {
  id?: string;
  name?: string;
}

/**
 *
 */
export class ServiceApi extends runtime.BaseAPI {
  /**
   */
  async apiServiceCreatePostRaw(
    requestParameters: ApiServiceCreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServiceDTOResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/Service/create`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateServiceDTOToJSON(requestParameters["createServiceDTO"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceCreatePost(
    requestParameters: ApiServiceCreatePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ServiceDTOResponseWrapper> {
    const response = await this.apiServiceCreatePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceDeletePostRaw(
    requestParameters: ApiServiceDeletePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/delete`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceDeletePost(
    requestParameters: ApiServiceDeletePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiServiceDeletePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceGetAllGlobalGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServiceDTOListResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/getAllGlobal`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceGetAllGlobalGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDTOListResponseWrapper> {
    const response = await this.apiServiceGetAllGlobalGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceGetAllOwnedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServiceDTOListResponseWrapper>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/getAllOwned`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOListResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceGetAllOwnedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceDTOListResponseWrapper> {
    const response = await this.apiServiceGetAllOwnedGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceGetSessionPostRaw(
    requestParameters: ApiServiceGetSessionPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StringResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["serviceId"] != null) {
      queryParameters["serviceId"] = requestParameters["serviceId"];
    }

    if (requestParameters["expiresAt"] != null) {
      queryParameters["expiresAt"] = (requestParameters["expiresAt"] as any).toISOString();
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/getSession`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceGetSessionPost(
    requestParameters: ApiServiceGetSessionPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StringResponseWrapper> {
    const response = await this.apiServiceGetSessionPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceGetbyIdGetRaw(
    requestParameters: ApiServiceGetbyIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServiceDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["serviceId"] != null) {
      queryParameters["serviceId"] = requestParameters["serviceId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/getbyId`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceGetbyIdGet(
    requestParameters: ApiServiceGetbyIdGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ServiceDTOResponseWrapper> {
    const response = await this.apiServiceGetbyIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async apiServiceUpdatePostRaw(
    requestParameters: ApiServiceUpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ServiceDTOResponseWrapper>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/Service/update`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDTOResponseWrapperFromJSON(jsonValue));
  }

  /**
   */
  async apiServiceUpdatePost(
    requestParameters: ApiServiceUpdatePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ServiceDTOResponseWrapper> {
    const response = await this.apiServiceUpdatePostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
