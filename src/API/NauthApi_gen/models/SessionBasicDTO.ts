/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface SessionBasicDTO
 */
export interface SessionBasicDTO {
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  userId?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  serviceId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof SessionBasicDTO
   */
  is2FAConfirmed?: boolean;
  /**
   *
   * @type {Date}
   * @memberof SessionBasicDTO
   */
  expiresAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof SessionBasicDTO
   */
  createdAt?: Date;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  ipAddress?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  device?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  browser?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  os?: string | null;
}

/**
 * Check if a given object implements the SessionBasicDTO interface.
 */
export function instanceOfSessionBasicDTO(value: object): value is SessionBasicDTO {
  return true;
}

export function SessionBasicDTOFromJSON(json: any): SessionBasicDTO {
  return SessionBasicDTOFromJSONTyped(json, false);
}

export function SessionBasicDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionBasicDTO {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    userId: json["userId"] == null ? undefined : json["userId"],
    serviceId: json["serviceId"] == null ? undefined : json["serviceId"],
    is2FAConfirmed: json["is2FAConfirmed"] == null ? undefined : json["is2FAConfirmed"],
    expiresAt: json["expiresAt"] == null ? undefined : new Date(json["expiresAt"]),
    createdAt: json["createdAt"] == null ? undefined : new Date(json["createdAt"]),
    ipAddress: json["ipAddress"] == null ? undefined : json["ipAddress"],
    device: json["device"] == null ? undefined : json["device"],
    browser: json["browser"] == null ? undefined : json["browser"],
    os: json["os"] == null ? undefined : json["os"],
  };
}

export function SessionBasicDTOToJSON(json: any): SessionBasicDTO {
  return SessionBasicDTOToJSONTyped(json, false);
}

export function SessionBasicDTOToJSONTyped(value?: SessionBasicDTO | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    userId: value["userId"],
    serviceId: value["serviceId"],
    is2FAConfirmed: value["is2FAConfirmed"],
    expiresAt: value["expiresAt"] == null ? undefined : value["expiresAt"].toISOString(),
    createdAt: value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    ipAddress: value["ipAddress"],
    device: value["device"],
    browser: value["browser"],
    os: value["os"],
  };
}
