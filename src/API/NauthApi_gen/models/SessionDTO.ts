/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ServiceBasicDTO } from "./ServiceBasicDTO";
import { ServiceBasicDTOFromJSON, ServiceBasicDTOFromJSONTyped, ServiceBasicDTOToJSON, ServiceBasicDTOToJSONTyped } from "./ServiceBasicDTO";

/**
 *
 * @export
 * @interface SessionDTO
 */
export interface SessionDTO {
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  userId?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  serviceId?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof SessionDTO
   */
  is2FAConfirmed?: boolean;
  /**
   *
   * @type {Date}
   * @memberof SessionDTO
   */
  expiresAt?: Date;
  /**
   *
   * @type {Date}
   * @memberof SessionDTO
   */
  createdAt?: Date;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  ipAddress?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  device?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  browser?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  os?: string | null;
  /**
   *
   * @type {ServiceBasicDTO}
   * @memberof SessionDTO
   */
  service?: ServiceBasicDTO;
}

/**
 * Check if a given object implements the SessionDTO interface.
 */
export function instanceOfSessionDTO(value: object): value is SessionDTO {
  return true;
}

export function SessionDTOFromJSON(json: any): SessionDTO {
  return SessionDTOFromJSONTyped(json, false);
}

export function SessionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionDTO {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    userId: json["userId"] == null ? undefined : json["userId"],
    serviceId: json["serviceId"] == null ? undefined : json["serviceId"],
    is2FAConfirmed: json["is2FAConfirmed"] == null ? undefined : json["is2FAConfirmed"],
    expiresAt: json["expiresAt"] == null ? undefined : new Date(json["expiresAt"]),
    createdAt: json["createdAt"] == null ? undefined : new Date(json["createdAt"]),
    ipAddress: json["ipAddress"] == null ? undefined : json["ipAddress"],
    device: json["device"] == null ? undefined : json["device"],
    browser: json["browser"] == null ? undefined : json["browser"],
    os: json["os"] == null ? undefined : json["os"],
    service: json["service"] == null ? undefined : ServiceBasicDTOFromJSON(json["service"]),
  };
}

export function SessionDTOToJSON(json: any): SessionDTO {
  return SessionDTOToJSONTyped(json, false);
}

export function SessionDTOToJSONTyped(value?: SessionDTO | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    userId: value["userId"],
    serviceId: value["serviceId"],
    is2FAConfirmed: value["is2FAConfirmed"],
    expiresAt: value["expiresAt"] == null ? undefined : value["expiresAt"].toISOString(),
    createdAt: value["createdAt"] == null ? undefined : value["createdAt"].toISOString(),
    ipAddress: value["ipAddress"],
    device: value["device"],
    browser: value["browser"],
    os: value["os"],
    service: ServiceBasicDTOToJSON(value["service"]),
  };
}
