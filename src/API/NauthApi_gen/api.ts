/* tslint:disable */
/* eslint-disable */
/**
 * nauth-asp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from "./base";

/**
 *
 * @export
 * @interface AdminUpdateUserNameDTO
 */
export interface AdminUpdateUserNameDTO {
  /**
   *
   * @type {number}
   * @memberof AdminUpdateUserNameDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateUserNameDTO
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface ApplyEmailActionResponse
 */
export interface ApplyEmailActionResponse {
  /**
   *
   * @type {boolean}
   * @memberof ApplyEmailActionResponse
   */
  appliedSuccessfully?: boolean;
}
/**
 *
 * @export
 * @interface ApplyEmailActionResponseResponseWrapper
 */
export interface ApplyEmailActionResponseResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof ApplyEmailActionResponseResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof ApplyEmailActionResponseResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {ApplyEmailActionResponse}
   * @memberof ApplyEmailActionResponseResponseWrapper
   */
  response?: ApplyEmailActionResponse;
}

/**
 *
 * @export
 * @enum {string}
 */

export const AuthFailureReasons = {
  SessionExpired: "SessionExpired",
  _2FaRequired: "_2FARequired",
  RequireVerifiedEmail: "RequireVerifiedEmail",
  RequireEnabledUser: "RequireEnabledUser",
  Require2FaSetup: "Require2FASetup",
  ForeginResource: "ForeginResource",
  ManageUsers: "ManageUsers",
  ManageOwnServices: "ManageOwnServices",
  ManageServices: "ManageServices",
  ManageEmailTemplates: "ManageEmailTemplates",
} as const;

export type AuthFailureReasons = (typeof AuthFailureReasons)[keyof typeof AuthFailureReasons];

/**
 *
 * @export
 * @interface CreateEmailTemplateDTO
 */
export interface CreateEmailTemplateDTO {
  /**
   *
   * @type {string}
   * @memberof CreateEmailTemplateDTO
   */
  name?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateEmailTemplateDTO
   */
  isActive?: boolean;
  /**
   *
   * @type {EmailTemplateType}
   * @memberof CreateEmailTemplateDTO
   */
  type?: EmailTemplateType;
  /**
   *
   * @type {string}
   * @memberof CreateEmailTemplateDTO
   */
  subject?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateEmailTemplateDTO
   */
  body?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateEmailTemplateDTO
   */
  htmlBody?: string | null;
}

/**
 *
 * @export
 * @interface CreateServiceDTO
 */
export interface CreateServiceDTO {
  /**
   *
   * @type {string}
   * @memberof CreateServiceDTO
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
  /**
   *
   * @type {string}
   * @memberof CreateUserDTO
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDTO
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserDTO
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface DecodedEmailActionDTO
 */
export interface DecodedEmailActionDTO {
  /**
   *
   * @type {number}
   * @memberof DecodedEmailActionDTO
   */
  id?: number;
  /**
   *
   * @type {UserBasicDTO}
   * @memberof DecodedEmailActionDTO
   */
  user?: UserBasicDTO;
  /**
   *
   * @type {string}
   * @memberof DecodedEmailActionDTO
   */
  data?: string | null;
  /**
   *
   * @type {EmailActionType}
   * @memberof DecodedEmailActionDTO
   */
  type?: EmailActionType;
  /**
   *
   * @type {string}
   * @memberof DecodedEmailActionDTO
   */
  expiresAt?: string;
  /**
   *
   * @type {string}
   * @memberof DecodedEmailActionDTO
   */
  createdAt?: string;
}

/**
 *
 * @export
 * @interface DecodedEmailActionDTOResponseWrapper
 */
export interface DecodedEmailActionDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof DecodedEmailActionDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof DecodedEmailActionDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {DecodedEmailActionDTO}
   * @memberof DecodedEmailActionDTOResponseWrapper
   */
  response?: DecodedEmailActionDTO;
}

/**
 *
 * @export
 * @interface EmailActionDTO
 */
export interface EmailActionDTO {
  /**
   *
   * @type {number}
   * @memberof EmailActionDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof EmailActionDTO
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof EmailActionDTO
   */
  data?: string | null;
  /**
   *
   * @type {EmailActionType}
   * @memberof EmailActionDTO
   */
  type?: EmailActionType;
  /**
   *
   * @type {string}
   * @memberof EmailActionDTO
   */
  expiresAt?: string;
  /**
   *
   * @type {string}
   * @memberof EmailActionDTO
   */
  createdAt?: string;
}

/**
 *
 * @export
 * @interface EmailActionDTOListResponseWrapper
 */
export interface EmailActionDTOListResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof EmailActionDTOListResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof EmailActionDTOListResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {Array<EmailActionDTO>}
   * @memberof EmailActionDTOListResponseWrapper
   */
  response?: Array<EmailActionDTO> | null;
}

/**
 *
 * @export
 * @enum {string}
 */

export const EmailActionType = {
  VerifyEmail: "VerifyEmail",
  PasswordReset: "PasswordReset",
  EmailCode: "EmailCode",
  EmailSignIn: "EmailSignIn",
  DeleteAccount: "DeleteAccount",
  ChangeEmail: "ChangeEmail",
} as const;

export type EmailActionType = (typeof EmailActionType)[keyof typeof EmailActionType];

/**
 *
 * @export
 * @interface EmailTemplateDTO
 */
export interface EmailTemplateDTO {
  /**
   *
   * @type {number}
   * @memberof EmailTemplateDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof EmailTemplateDTO
   */
  name?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof EmailTemplateDTO
   */
  isActive?: boolean;
  /**
   *
   * @type {EmailTemplateType}
   * @memberof EmailTemplateDTO
   */
  type?: EmailTemplateType;
  /**
   *
   * @type {string}
   * @memberof EmailTemplateDTO
   */
  subject?: string | null;
  /**
   *
   * @type {string}
   * @memberof EmailTemplateDTO
   */
  body?: string | null;
  /**
   *
   * @type {string}
   * @memberof EmailTemplateDTO
   */
  htmlBody?: string | null;
  /**
   *
   * @type {string}
   * @memberof EmailTemplateDTO
   */
  createdAt?: string;
}

/**
 *
 * @export
 * @interface EmailTemplateDTOListResponseWrapper
 */
export interface EmailTemplateDTOListResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof EmailTemplateDTOListResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof EmailTemplateDTOListResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {Array<EmailTemplateDTO>}
   * @memberof EmailTemplateDTOListResponseWrapper
   */
  response?: Array<EmailTemplateDTO> | null;
}

/**
 *
 * @export
 * @interface EmailTemplateDTOResponseWrapper
 */
export interface EmailTemplateDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof EmailTemplateDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof EmailTemplateDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {EmailTemplateDTO}
   * @memberof EmailTemplateDTOResponseWrapper
   */
  response?: EmailTemplateDTO;
}

/**
 *
 * @export
 * @enum {string}
 */

export const EmailTemplateType = {
  VerifyEmail: "VerifyEmail",
  PasswordReset: "PasswordReset",
  EmailCode: "EmailCode",
  EmailSignIn: "EmailSignIn",
  DeleteAccount: "DeleteAccount",
  ChangeEmail: "ChangeEmail",
} as const;

export type EmailTemplateType = (typeof EmailTemplateType)[keyof typeof EmailTemplateType];

/**
 *
 * @export
 * @interface FullSessionDTO
 */
export interface FullSessionDTO {
  /**
   *
   * @type {number}
   * @memberof FullSessionDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof FullSessionDTO
   */
  userId?: number;
  /**
   *
   * @type {number}
   * @memberof FullSessionDTO
   */
  serviceId?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof FullSessionDTO
   */
  is2FAConfirmed?: boolean;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  expiresAt?: string;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  ipAddress?: string | null;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  device?: string | null;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  browser?: string | null;
  /**
   *
   * @type {string}
   * @memberof FullSessionDTO
   */
  os?: string | null;
  /**
   *
   * @type {ServiceDTO}
   * @memberof FullSessionDTO
   */
  service?: ServiceDTO;
  /**
   *
   * @type {UserDTO}
   * @memberof FullSessionDTO
   */
  user?: UserDTO;
}
/**
 *
 * @export
 * @interface FullSessionDTOResponseWrapper
 */
export interface FullSessionDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof FullSessionDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof FullSessionDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {FullSessionDTO}
   * @memberof FullSessionDTOResponseWrapper
   */
  response?: FullSessionDTO;
}

/**
 *
 * @export
 * @interface Model2FAEntryDTO
 */
export interface Model2FAEntryDTO {
  /**
   *
   * @type {number}
   * @memberof Model2FAEntryDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Model2FAEntryDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof Model2FAEntryDTO
   */
  createdAt?: string;
}
/**
 *
 * @export
 * @interface Model2FAEntrySetupDTO
 */
export interface Model2FAEntrySetupDTO {
  /**
   *
   * @type {string}
   * @memberof Model2FAEntrySetupDTO
   */
  _2FASecret?: string | null;
  /**
   *
   * @type {string}
   * @memberof Model2FAEntrySetupDTO
   */
  recoveryCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof Model2FAEntrySetupDTO
   */
  qrCodeUrl?: string | null;
}
/**
 *
 * @export
 * @interface Model2FAEntrySetupDTOResponseWrapper
 */
export interface Model2FAEntrySetupDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof Model2FAEntrySetupDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof Model2FAEntrySetupDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {Model2FAEntrySetupDTO}
   * @memberof Model2FAEntrySetupDTOResponseWrapper
   */
  response?: Model2FAEntrySetupDTO;
}

/**
 *
 * @export
 * @interface NeutralizeEmailActionResponse
 */
export interface NeutralizeEmailActionResponse {
  /**
   *
   * @type {boolean}
   * @memberof NeutralizeEmailActionResponse
   */
  neutralizedSuccessfully?: boolean;
}
/**
 *
 * @export
 * @interface NeutralizeEmailActionResponseResponseWrapper
 */
export interface NeutralizeEmailActionResponseResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof NeutralizeEmailActionResponseResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof NeutralizeEmailActionResponseResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {NeutralizeEmailActionResponse}
   * @memberof NeutralizeEmailActionResponseResponseWrapper
   */
  response?: NeutralizeEmailActionResponse;
}

/**
 *
 * @export
 * @interface PermissionBasicDTO
 */
export interface PermissionBasicDTO {
  /**
   *
   * @type {number}
   * @memberof PermissionBasicDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PermissionBasicDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof PermissionBasicDTO
   */
  key?: string | null;
  /**
   *
   * @type {number}
   * @memberof PermissionBasicDTO
   */
  serviceId?: number | null;
  /**
   *
   * @type {string}
   * @memberof PermissionBasicDTO
   */
  createdAt?: string;
}
/**
 *
 * @export
 * @interface RequestEmailActionResponse
 */
export interface RequestEmailActionResponse {
  /**
   *
   * @type {boolean}
   * @memberof RequestEmailActionResponse
   */
  sentSuccessfully?: boolean;
  /**
   *
   * @type {number}
   * @memberof RequestEmailActionResponse
   */
  secondsToWait?: number | null;
}
/**
 *
 * @export
 * @interface RequestEmailActionResponseResponseWrapper
 */
export interface RequestEmailActionResponseResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof RequestEmailActionResponseResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof RequestEmailActionResponseResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {RequestEmailActionResponse}
   * @memberof RequestEmailActionResponseResponseWrapper
   */
  response?: RequestEmailActionResponse;
}

/**
 *
 * @export
 * @interface ServiceBasicDTO
 */
export interface ServiceBasicDTO {
  /**
   *
   * @type {number}
   * @memberof ServiceBasicDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ServiceBasicDTO
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof ServiceBasicDTO
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof ServiceBasicDTO
   */
  createdAt?: string;
}
/**
 *
 * @export
 * @interface ServiceDTO
 */
export interface ServiceDTO {
  /**
   *
   * @type {number}
   * @memberof ServiceDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ServiceDTO
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof ServiceDTO
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof ServiceDTO
   */
  createdAt?: string;
  /**
   *
   * @type {Array<SessionBasicDTO>}
   * @memberof ServiceDTO
   */
  sessions?: Array<SessionBasicDTO> | null;
  /**
   *
   * @type {Array<PermissionBasicDTO>}
   * @memberof ServiceDTO
   */
  permissions?: Array<PermissionBasicDTO> | null;
}
/**
 *
 * @export
 * @interface ServiceDTOListResponseWrapper
 */
export interface ServiceDTOListResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof ServiceDTOListResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof ServiceDTOListResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {Array<ServiceDTO>}
   * @memberof ServiceDTOListResponseWrapper
   */
  response?: Array<ServiceDTO> | null;
}

/**
 *
 * @export
 * @interface ServiceDTOResponseWrapper
 */
export interface ServiceDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof ServiceDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof ServiceDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {ServiceDTO}
   * @memberof ServiceDTOResponseWrapper
   */
  response?: ServiceDTO;
}

/**
 *
 * @export
 * @interface SessionBasicDTO
 */
export interface SessionBasicDTO {
  /**
   *
   * @type {number}
   * @memberof SessionBasicDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof SessionBasicDTO
   */
  userId?: number;
  /**
   *
   * @type {number}
   * @memberof SessionBasicDTO
   */
  serviceId?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof SessionBasicDTO
   */
  is2FAConfirmed?: boolean;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  expiresAt?: string;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  ipAddress?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  device?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  browser?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionBasicDTO
   */
  os?: string | null;
}
/**
 *
 * @export
 * @interface SessionDTO
 */
export interface SessionDTO {
  /**
   *
   * @type {number}
   * @memberof SessionDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof SessionDTO
   */
  userId?: number;
  /**
   *
   * @type {number}
   * @memberof SessionDTO
   */
  serviceId?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof SessionDTO
   */
  is2FAConfirmed?: boolean;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  expiresAt?: string;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  ipAddress?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  device?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  browser?: string | null;
  /**
   *
   * @type {string}
   * @memberof SessionDTO
   */
  os?: string | null;
  /**
   *
   * @type {ServiceBasicDTO}
   * @memberof SessionDTO
   */
  service?: ServiceBasicDTO;
}
/**
 *
 * @export
 * @interface SessionDTOListResponseWrapper
 */
export interface SessionDTOListResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof SessionDTOListResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof SessionDTOListResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {Array<SessionDTO>}
   * @memberof SessionDTOListResponseWrapper
   */
  response?: Array<SessionDTO> | null;
}

/**
 *
 * @export
 * @interface StringResponseWrapper
 */
export interface StringResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof StringResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof StringResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {string}
   * @memberof StringResponseWrapper
   */
  response?: string | null;
}

/**
 *
 * @export
 * @interface UpdateNameDTO
 */
export interface UpdateNameDTO {
  /**
   *
   * @type {string}
   * @memberof UpdateNameDTO
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface UserBasicDTO
 */
export interface UserBasicDTO {
  /**
   *
   * @type {number}
   * @memberof UserBasicDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UserBasicDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBasicDTO
   */
  email?: string | null;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
  /**
   *
   * @type {number}
   * @memberof UserDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UserDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserDTO
   */
  email?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof UserDTO
   */
  isEmailVerified?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserDTO
   */
  createdAt?: string;
  /**
   *
   * @type {Array<EmailActionDTO>}
   * @memberof UserDTO
   */
  emailActions?: Array<EmailActionDTO> | null;
  /**
   *
   * @type {Array<SessionDTO>}
   * @memberof UserDTO
   */
  sessions?: Array<SessionDTO> | null;
  /**
   *
   * @type {Array<UserPermissionDTO>}
   * @memberof UserDTO
   */
  permissions?: Array<UserPermissionDTO> | null;
  /**
   *
   * @type {Array<ServiceDTO>}
   * @memberof UserDTO
   */
  services?: Array<ServiceDTO> | null;
  /**
   *
   * @type {Array<Model2FAEntryDTO>}
   * @memberof UserDTO
   */
  twoFactorAuthEntries?: Array<Model2FAEntryDTO> | null;
}
/**
 *
 * @export
 * @interface UserDTOResponseWrapper
 */
export interface UserDTOResponseWrapper {
  /**
   *
   * @type {WrResponseStatus}
   * @memberof UserDTOResponseWrapper
   */
  status?: WrResponseStatus;
  /**
   *
   * @type {Array<AuthFailureReasons>}
   * @memberof UserDTOResponseWrapper
   */
  authenticationFailureReasons?: Array<AuthFailureReasons> | null;
  /**
   *
   * @type {UserDTO}
   * @memberof UserDTOResponseWrapper
   */
  response?: UserDTO;
}

/**
 *
 * @export
 * @interface UserPermissionDTO
 */
export interface UserPermissionDTO {
  /**
   *
   * @type {number}
   * @memberof UserPermissionDTO
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof UserPermissionDTO
   */
  permissionId?: number;
  /**
   *
   * @type {number}
   * @memberof UserPermissionDTO
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof UserPermissionDTO
   */
  createdAt?: string;
  /**
   *
   * @type {PermissionBasicDTO}
   * @memberof UserPermissionDTO
   */
  permission?: PermissionBasicDTO;
}
/**
 *
 * @export
 * @enum {string}
 */

export const WrResponseStatus = {
  InternalError: "InternalError",
  Ok: "Ok",
  Forbidden: "Forbidden",
  Unauthorized: "Unauthorized",
  NotFound: "NotFound",
  BadRequest: "BadRequest",
  Cooldown: "Cooldown",
  ServerDown: "ServerDown",
  EmailNotAvailable: "EmailNotAvailable",
  InvalidEmail: "InvalidEmail",
  InvalidPassword: "InvalidPassword",
  InvalidApplyToken: "InvalidApplyToken",
} as const;

export type WrResponseStatus = (typeof WrResponseStatus)[keyof typeof WrResponseStatus];

/**
 * EmailActionsApi - axios parameter creator
 * @export
 */
export const EmailActionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsApplyEmailRequestPost: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/applyEmailRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsChangeEmailApplyPost: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/changeEmailApply`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsChangeEmailRequestPost: async (newEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/changeEmailRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (newEmail !== undefined) {
        localVarQueryParameter["newEmail"] = newEmail;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDecodeApplyTokenPost: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/decodeApplyToken`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDeleteAccountApplyPost: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/deleteAccountApply`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDeleteAccountRequestPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/deleteAccountRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsEmailCodeRequestPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/emailCodeRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsEmailSignInRequestPost: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/emailSignInRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsGetAllByUserIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/getAllByUserId`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsNeutralizeEmailActionPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/neutralizeEmailAction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [token]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsPasswordResetApplyPost: async (token?: string, password?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/passwordResetApply`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      if (password !== undefined) {
        localVarQueryParameter["password"] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsPasswordResetRequestPost: async (email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/passwordResetRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsVerifyEmailRequestPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailActions/verifyEmailRequest`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmailActionsApi - functional programming interface
 * @export
 */
export const EmailActionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmailActionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsApplyEmailRequestPost(
      token?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplyEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsApplyEmailRequestPost(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsApplyEmailRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsChangeEmailApplyPost(
      token?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplyEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsChangeEmailApplyPost(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsChangeEmailApplyPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsChangeEmailRequestPost(
      newEmail?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsChangeEmailRequestPost(newEmail, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsChangeEmailRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsDecodeApplyTokenPost(
      token?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecodedEmailActionDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsDecodeApplyTokenPost(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsDecodeApplyTokenPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsDeleteAccountApplyPost(
      token?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplyEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsDeleteAccountApplyPost(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsDeleteAccountApplyPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsDeleteAccountRequestPost(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsDeleteAccountRequestPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsDeleteAccountRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsEmailCodeRequestPost(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsEmailCodeRequestPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsEmailCodeRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsEmailSignInRequestPost(
      email?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsEmailSignInRequestPost(email, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsEmailSignInRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsGetAllByUserIdGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailActionDTOListResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsGetAllByUserIdGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsGetAllByUserIdGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsNeutralizeEmailActionPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NeutralizeEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsNeutralizeEmailActionPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsNeutralizeEmailActionPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [token]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsPasswordResetApplyPost(
      token?: string,
      password?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplyEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsPasswordResetApplyPost(token, password, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsPasswordResetApplyPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsPasswordResetRequestPost(
      email?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsPasswordResetRequestPost(email, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsPasswordResetRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailActionsVerifyEmailRequestPost(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestEmailActionResponseResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailActionsVerifyEmailRequestPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EmailActionsApi.apiEmailActionsVerifyEmailRequestPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * EmailActionsApi - factory interface
 * @export
 */
export const EmailActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = EmailActionsApiFp(configuration);
  return {
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsApplyEmailRequestPost(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApplyEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsApplyEmailRequestPost(token, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsChangeEmailApplyPost(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApplyEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsChangeEmailApplyPost(token, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsChangeEmailRequestPost(
      newEmail?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsChangeEmailRequestPost(newEmail, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDecodeApplyTokenPost(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<DecodedEmailActionDTOResponseWrapper> {
      return localVarFp.apiEmailActionsDecodeApplyTokenPost(token, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDeleteAccountApplyPost(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApplyEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsDeleteAccountApplyPost(token, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsDeleteAccountRequestPost(options?: RawAxiosRequestConfig): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsDeleteAccountRequestPost(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsEmailCodeRequestPost(options?: RawAxiosRequestConfig): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsEmailCodeRequestPost(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsEmailSignInRequestPost(email?: string, options?: RawAxiosRequestConfig): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsEmailSignInRequestPost(email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsGetAllByUserIdGet(options?: RawAxiosRequestConfig): AxiosPromise<EmailActionDTOListResponseWrapper> {
      return localVarFp.apiEmailActionsGetAllByUserIdGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsNeutralizeEmailActionPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<NeutralizeEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsNeutralizeEmailActionPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [token]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsPasswordResetApplyPost(
      token?: string,
      password?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApplyEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsPasswordResetApplyPost(token, password, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsPasswordResetRequestPost(
      email?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsPasswordResetRequestPost(email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailActionsVerifyEmailRequestPost(options?: RawAxiosRequestConfig): AxiosPromise<RequestEmailActionResponseResponseWrapper> {
      return localVarFp.apiEmailActionsVerifyEmailRequestPost(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * EmailActionsApi - object-oriented interface
 * @export
 * @class EmailActionsApi
 * @extends {BaseAPI}
 */
export class EmailActionsApi extends BaseAPI {
  /**
   *
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsApplyEmailRequestPost(token?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsApplyEmailRequestPost(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsChangeEmailApplyPost(token?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsChangeEmailApplyPost(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [newEmail]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsChangeEmailRequestPost(newEmail?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsChangeEmailRequestPost(newEmail, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsDecodeApplyTokenPost(token?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsDecodeApplyTokenPost(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsDeleteAccountApplyPost(token?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsDeleteAccountApplyPost(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsDeleteAccountRequestPost(options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsDeleteAccountRequestPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsEmailCodeRequestPost(options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsEmailCodeRequestPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [email]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsEmailSignInRequestPost(email?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsEmailSignInRequestPost(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsGetAllByUserIdGet(options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsGetAllByUserIdGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsNeutralizeEmailActionPost(id?: number, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsNeutralizeEmailActionPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [token]
   * @param {string} [password]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsPasswordResetApplyPost(token?: string, password?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsPasswordResetApplyPost(token, password, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [email]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsPasswordResetRequestPost(email?: string, options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsPasswordResetRequestPost(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailActionsApi
   */
  public apiEmailActionsVerifyEmailRequestPost(options?: RawAxiosRequestConfig) {
    return EmailActionsApiFp(this.configuration)
      .apiEmailActionsVerifyEmailRequestPost(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EmailTemplatesApi - axios parameter creator
 * @export
 */
export const EmailTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailTemplates/all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailTemplates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiEmailTemplatesIdGet", "id", id);
      const localVarPath = `/api/EmailTemplates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateEmailTemplateDTO} [createEmailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesPost: async (createEmailTemplateDTO?: CreateEmailTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailTemplates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createEmailTemplateDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EmailTemplateDTO} [emailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesPut: async (emailTemplateDTO?: EmailTemplateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/EmailTemplates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(emailTemplateDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EmailTemplatesApi - functional programming interface
 * @export
 */
export const EmailTemplatesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmailTemplatesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailTemplatesAllGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplateDTOListResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailTemplatesAllGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["EmailTemplatesApi.apiEmailTemplatesAllGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailTemplatesDelete(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailTemplatesDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["EmailTemplatesApi.apiEmailTemplatesDelete"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailTemplatesIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplateDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailTemplatesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["EmailTemplatesApi.apiEmailTemplatesIdGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateEmailTemplateDTO} [createEmailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailTemplatesPost(
      createEmailTemplateDTO?: CreateEmailTemplateDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplateDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailTemplatesPost(createEmailTemplateDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["EmailTemplatesApi.apiEmailTemplatesPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {EmailTemplateDTO} [emailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiEmailTemplatesPut(
      emailTemplateDTO?: EmailTemplateDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplateDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiEmailTemplatesPut(emailTemplateDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["EmailTemplatesApi.apiEmailTemplatesPut"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * EmailTemplatesApi - factory interface
 * @export
 */
export const EmailTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = EmailTemplatesApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesAllGet(options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplateDTOListResponseWrapper> {
      return localVarFp.apiEmailTemplatesAllGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiEmailTemplatesDelete(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplateDTOResponseWrapper> {
      return localVarFp.apiEmailTemplatesIdGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateEmailTemplateDTO} [createEmailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesPost(
      createEmailTemplateDTO?: CreateEmailTemplateDTO,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<EmailTemplateDTOResponseWrapper> {
      return localVarFp.apiEmailTemplatesPost(createEmailTemplateDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {EmailTemplateDTO} [emailTemplateDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEmailTemplatesPut(emailTemplateDTO?: EmailTemplateDTO, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplateDTOResponseWrapper> {
      return localVarFp.apiEmailTemplatesPut(emailTemplateDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * EmailTemplatesApi - object-oriented interface
 * @export
 * @class EmailTemplatesApi
 * @extends {BaseAPI}
 */
export class EmailTemplatesApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailTemplatesApi
   */
  public apiEmailTemplatesAllGet(options?: RawAxiosRequestConfig) {
    return EmailTemplatesApiFp(this.configuration)
      .apiEmailTemplatesAllGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailTemplatesApi
   */
  public apiEmailTemplatesDelete(id?: number, options?: RawAxiosRequestConfig) {
    return EmailTemplatesApiFp(this.configuration)
      .apiEmailTemplatesDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailTemplatesApi
   */
  public apiEmailTemplatesIdGet(id: number, options?: RawAxiosRequestConfig) {
    return EmailTemplatesApiFp(this.configuration)
      .apiEmailTemplatesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateEmailTemplateDTO} [createEmailTemplateDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailTemplatesApi
   */
  public apiEmailTemplatesPost(createEmailTemplateDTO?: CreateEmailTemplateDTO, options?: RawAxiosRequestConfig) {
    return EmailTemplatesApiFp(this.configuration)
      .apiEmailTemplatesPost(createEmailTemplateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EmailTemplateDTO} [emailTemplateDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailTemplatesApi
   */
  public apiEmailTemplatesPut(emailTemplateDTO?: EmailTemplateDTO, options?: RawAxiosRequestConfig) {
    return EmailTemplatesApiFp(this.configuration)
      .apiEmailTemplatesPut(emailTemplateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * NauthApi - axios parameter creator
 * @export
 */
export const NauthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthAddUserPermissionGet: async (permissionId?: number, userId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Nauth/addUserPermission`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (permissionId !== undefined) {
        localVarQueryParameter["permissionId"] = permissionId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthDecodeAuthTokenGet: async (token?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Nauth/decodeAuthToken`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthRemoveUserPermissionGet: async (permissionId?: number, userId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Nauth/removeUserPermission`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (permissionId !== undefined) {
        localVarQueryParameter["permissionId"] = permissionId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * NauthApi - functional programming interface
 * @export
 */
export const NauthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = NauthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiNauthAddUserPermissionGet(
      permissionId?: number,
      userId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiNauthAddUserPermissionGet(permissionId, userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["NauthApi.apiNauthAddUserPermissionGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiNauthDecodeAuthTokenGet(
      token?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullSessionDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiNauthDecodeAuthTokenGet(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["NauthApi.apiNauthDecodeAuthTokenGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiNauthRemoveUserPermissionGet(
      permissionId?: number,
      userId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiNauthRemoveUserPermissionGet(permissionId, userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["NauthApi.apiNauthRemoveUserPermissionGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * NauthApi - factory interface
 * @export
 */
export const NauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = NauthApiFp(configuration);
  return {
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthAddUserPermissionGet(permissionId?: number, userId?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiNauthAddUserPermissionGet(permissionId, userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthDecodeAuthTokenGet(token?: string, options?: RawAxiosRequestConfig): AxiosPromise<FullSessionDTOResponseWrapper> {
      return localVarFp.apiNauthDecodeAuthTokenGet(token, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [permissionId]
     * @param {number} [userId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiNauthRemoveUserPermissionGet(permissionId?: number, userId?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiNauthRemoveUserPermissionGet(permissionId, userId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * NauthApi - object-oriented interface
 * @export
 * @class NauthApi
 * @extends {BaseAPI}
 */
export class NauthApi extends BaseAPI {
  /**
   *
   * @param {number} [permissionId]
   * @param {number} [userId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NauthApi
   */
  public apiNauthAddUserPermissionGet(permissionId?: number, userId?: number, options?: RawAxiosRequestConfig) {
    return NauthApiFp(this.configuration)
      .apiNauthAddUserPermissionGet(permissionId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NauthApi
   */
  public apiNauthDecodeAuthTokenGet(token?: string, options?: RawAxiosRequestConfig) {
    return NauthApiFp(this.configuration)
      .apiNauthDecodeAuthTokenGet(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [permissionId]
   * @param {number} [userId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NauthApi
   */
  public apiNauthRemoveUserPermissionGet(permissionId?: number, userId?: number, options?: RawAxiosRequestConfig) {
    return NauthApiFp(this.configuration)
      .apiNauthRemoveUserPermissionGet(permissionId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateServiceDTO} [createServiceDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceCreatePost: async (createServiceDTO?: CreateServiceDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Service/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createServiceDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceDeletePost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Service/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceGetAllGlobalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Service/getAllGlobal`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceGetAllOwnedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Service/getAllOwned`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceUpdatePost: async (id?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Service/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateServiceDTO} [createServiceDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiServiceCreatePost(
      createServiceDTO?: CreateServiceDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceCreatePost(createServiceDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["ServiceApi.apiServiceCreatePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiServiceDeletePost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceDeletePost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["ServiceApi.apiServiceDeletePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiServiceGetAllGlobalGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDTOListResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceGetAllGlobalGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["ServiceApi.apiServiceGetAllGlobalGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiServiceGetAllOwnedGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDTOListResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceGetAllOwnedGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["ServiceApi.apiServiceGetAllOwnedGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiServiceUpdatePost(
      id?: number,
      name?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceUpdatePost(id, name, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["ServiceApi.apiServiceUpdatePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ServiceApiFp(configuration);
  return {
    /**
     *
     * @param {CreateServiceDTO} [createServiceDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceCreatePost(createServiceDTO?: CreateServiceDTO, options?: RawAxiosRequestConfig): AxiosPromise<ServiceDTOResponseWrapper> {
      return localVarFp.apiServiceCreatePost(createServiceDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceDeletePost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiServiceDeletePost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceGetAllGlobalGet(options?: RawAxiosRequestConfig): AxiosPromise<ServiceDTOListResponseWrapper> {
      return localVarFp.apiServiceGetAllGlobalGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceGetAllOwnedGet(options?: RawAxiosRequestConfig): AxiosPromise<ServiceDTOListResponseWrapper> {
      return localVarFp.apiServiceGetAllOwnedGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiServiceUpdatePost(id?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ServiceDTOResponseWrapper> {
      return localVarFp.apiServiceUpdatePost(id, name, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
  /**
   *
   * @param {CreateServiceDTO} [createServiceDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apiServiceCreatePost(createServiceDTO?: CreateServiceDTO, options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apiServiceCreatePost(createServiceDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apiServiceDeletePost(id?: number, options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apiServiceDeletePost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apiServiceGetAllGlobalGet(options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apiServiceGetAllGlobalGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apiServiceGetAllOwnedGet(options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apiServiceGetAllOwnedGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ServiceApi
   */
  public apiServiceUpdatePost(id?: number, name?: string, options?: RawAxiosRequestConfig) {
    return ServiceApiFp(this.configuration)
      .apiServiceUpdatePost(id, name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionGetMyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Session/getMy`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionRevokeAllMyPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Session/revokeAllMy`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionRevokePost: async (sessionId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/Session/revoke`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (sessionId !== undefined) {
        localVarQueryParameter["sessionId"] = sessionId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSessionGetMyGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionDTOListResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionGetMyGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["SessionApi.apiSessionGetMyGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSessionRevokeAllMyPost(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionRevokeAllMyPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["SessionApi.apiSessionRevokeAllMyPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSessionRevokePost(
      sessionId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionRevokePost(sessionId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["SessionApi.apiSessionRevokePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SessionApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionGetMyGet(options?: RawAxiosRequestConfig): AxiosPromise<SessionDTOListResponseWrapper> {
      return localVarFp.apiSessionGetMyGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionRevokeAllMyPost(options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiSessionRevokeAllMyPost(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSessionRevokePost(sessionId?: number, options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiSessionRevokePost(sessionId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionApi
   */
  public apiSessionGetMyGet(options?: RawAxiosRequestConfig) {
    return SessionApiFp(this.configuration)
      .apiSessionGetMyGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionApi
   */
  public apiSessionRevokeAllMyPost(options?: RawAxiosRequestConfig) {
    return SessionApiFp(this.configuration)
      .apiSessionRevokeAllMyPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [sessionId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionApi
   */
  public apiSessionRevokePost(sessionId?: number, options?: RawAxiosRequestConfig) {
    return SessionApiFp(this.configuration)
      .apiSessionRevokePost(sessionId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/Status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async statusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.statusGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["StatusApi.statusGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = StatusApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.statusGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatusApi
   */
  public statusGet(options?: RawAxiosRequestConfig) {
    return StatusApiFp(this.configuration)
      .statusGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserActivate2FAPost: async (code?: string, _2faId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/activate2FA`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (_2faId !== undefined) {
        localVarQueryParameter["_2faId"] = _2faId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserActivateSessionPost: async (code?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/activateSession`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminDeleteUserPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminDeleteUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminDisableUserPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminDisableUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminEnableUserPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminEnableUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminForceUnVerifyEmailPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminForceUnVerifyEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminForceVerifyEmailPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminForceVerifyEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminSetUserEmailPost: async (id?: number, email?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminSetUserEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminSetUserPasswordPost: async (id?: number, password?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminSetUserPassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (password !== undefined) {
        localVarQueryParameter["password"] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UserDTO} [userDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminUpdatePermissionsPost: async (userDTO?: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminUpdatePermissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AdminUpdateUserNameDTO} [adminUpdateUserNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminUpdateUserNamePost: async (
      adminUpdateUserNameDTO?: AdminUpdateUserNameDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/User/adminUpdateUserName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateUserNameDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserCurrentUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/currentUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserDelete2FAWithCodePost: async (code?: string, _2faId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/delete2FAWithCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (_2faId !== undefined) {
        localVarQueryParameter["_2faId"] = _2faId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserDelete2FAWithRecoveryCodePost: async (code?: string, _2faId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/delete2FAWithRecoveryCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (_2faId !== undefined) {
        localVarQueryParameter["_2faId"] = _2faId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserLoginPost: async (createUserDTO?: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [email]
     * @param {number} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserLoginWithCodePost: async (email?: string, code?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/loginWithCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserRegisterPost: async (createUserDTO?: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserRevokeAllUserSessionsPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/revokeAllUserSessions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [code]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserSetup2FAPost: async (code?: string, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/setup2FA`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateNameDTO} [updateNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserUpdateUserNamePost: async (updateNameDTO?: UpdateNameDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/User/updateUserName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(updateNameDTO, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserActivate2FAPost(
      code?: string,
      _2faId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model2FAEntrySetupDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserActivate2FAPost(code, _2faId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserActivate2FAPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserActivateSessionPost(
      code?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model2FAEntrySetupDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserActivateSessionPost(code, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserActivateSessionPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminDeleteUserPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminDeleteUserPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminDeleteUserPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminDisableUserPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminDisableUserPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminDisableUserPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminEnableUserPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminEnableUserPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminEnableUserPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminForceUnVerifyEmailPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminForceUnVerifyEmailPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminForceUnVerifyEmailPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminForceVerifyEmailPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminForceVerifyEmailPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminForceVerifyEmailPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminSetUserEmailPost(
      id?: number,
      email?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminSetUserEmailPost(id, email, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminSetUserEmailPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminSetUserPasswordPost(
      id?: number,
      password?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminSetUserPasswordPost(id, password, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminSetUserPasswordPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UserDTO} [userDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminUpdatePermissionsPost(
      userDTO?: UserDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminUpdatePermissionsPost(userDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminUpdatePermissionsPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AdminUpdateUserNameDTO} [adminUpdateUserNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserAdminUpdateUserNamePost(
      adminUpdateUserNameDTO?: AdminUpdateUserNameDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserAdminUpdateUserNamePost(adminUpdateUserNameDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserAdminUpdateUserNamePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserCurrentUserGet(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserCurrentUserGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserCurrentUserGet"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserDelete2FAWithCodePost(
      code?: string,
      _2faId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model2FAEntrySetupDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserDelete2FAWithCodePost(code, _2faId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserDelete2FAWithCodePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserDelete2FAWithRecoveryCodePost(
      code?: string,
      _2faId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model2FAEntrySetupDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserDelete2FAWithRecoveryCodePost(code, _2faId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserDelete2FAWithRecoveryCodePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserLoginPost(
      createUserDTO?: CreateUserDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserLoginPost(createUserDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserLoginPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [email]
     * @param {number} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserLoginWithCodePost(
      email?: string,
      code?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserLoginWithCodePost(email, code, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserLoginWithCodePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserRegisterPost(
      createUserDTO?: CreateUserDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRegisterPost(createUserDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserRegisterPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserRevokeAllUserSessionsPost(
      id?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserRevokeAllUserSessionsPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserRevokeAllUserSessionsPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [code]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserSetup2FAPost(
      code?: string,
      name?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model2FAEntrySetupDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserSetup2FAPost(code, name, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserSetup2FAPost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateNameDTO} [updateNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUserUpdateUserNamePost(
      updateNameDTO?: UpdateNameDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTOResponseWrapper>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUpdateUserNamePost(updateNameDTO, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath = operationServerMap["UserApi.apiUserUpdateUserNamePost"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserActivate2FAPost(code?: string, _2faId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Model2FAEntrySetupDTOResponseWrapper> {
      return localVarFp.apiUserActivate2FAPost(code, _2faId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserActivateSessionPost(code?: string, options?: RawAxiosRequestConfig): AxiosPromise<Model2FAEntrySetupDTOResponseWrapper> {
      return localVarFp.apiUserActivateSessionPost(code, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminDeleteUserPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminDeleteUserPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminDisableUserPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminDisableUserPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminEnableUserPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminEnableUserPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminForceUnVerifyEmailPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminForceUnVerifyEmailPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminForceVerifyEmailPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminForceVerifyEmailPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminSetUserEmailPost(id?: number, email?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminSetUserEmailPost(id, email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminSetUserPasswordPost(id?: number, password?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminSetUserPasswordPost(id, password, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UserDTO} [userDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminUpdatePermissionsPost(userDTO?: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminUpdatePermissionsPost(userDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AdminUpdateUserNameDTO} [adminUpdateUserNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserAdminUpdateUserNamePost(
      adminUpdateUserNameDTO?: AdminUpdateUserNameDTO,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserAdminUpdateUserNamePost(adminUpdateUserNameDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserCurrentUserGet(options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserCurrentUserGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserDelete2FAWithCodePost(
      code?: string,
      _2faId?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Model2FAEntrySetupDTOResponseWrapper> {
      return localVarFp.apiUserDelete2FAWithCodePost(code, _2faId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [code]
     * @param {number} [_2faId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserDelete2FAWithRecoveryCodePost(
      code?: string,
      _2faId?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Model2FAEntrySetupDTOResponseWrapper> {
      return localVarFp.apiUserDelete2FAWithRecoveryCodePost(code, _2faId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserLoginPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiUserLoginPost(createUserDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [email]
     * @param {number} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserLoginWithCodePost(email?: string, code?: number, options?: RawAxiosRequestConfig): AxiosPromise<StringResponseWrapper> {
      return localVarFp.apiUserLoginWithCodePost(email, code, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateUserDTO} [createUserDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserRegisterPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserRegisterPost(createUserDTO, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserRevokeAllUserSessionsPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserRevokeAllUserSessionsPost(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [code]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserSetup2FAPost(code?: string, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Model2FAEntrySetupDTOResponseWrapper> {
      return localVarFp.apiUserSetup2FAPost(code, name, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateNameDTO} [updateNameDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUserUpdateUserNamePost(updateNameDTO?: UpdateNameDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserDTOResponseWrapper> {
      return localVarFp.apiUserUpdateUserNamePost(updateNameDTO, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {string} [code]
   * @param {number} [_2faId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserActivate2FAPost(code?: string, _2faId?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserActivate2FAPost(code, _2faId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [code]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserActivateSessionPost(code?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserActivateSessionPost(code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminDeleteUserPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminDeleteUserPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminDisableUserPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminDisableUserPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminEnableUserPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminEnableUserPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminForceUnVerifyEmailPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminForceUnVerifyEmailPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminForceVerifyEmailPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminForceVerifyEmailPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {string} [email]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminSetUserEmailPost(id?: number, email?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminSetUserEmailPost(id, email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {string} [password]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminSetUserPasswordPost(id?: number, password?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminSetUserPasswordPost(id, password, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserDTO} [userDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminUpdatePermissionsPost(userDTO?: UserDTO, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminUpdatePermissionsPost(userDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AdminUpdateUserNameDTO} [adminUpdateUserNameDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserAdminUpdateUserNamePost(adminUpdateUserNameDTO?: AdminUpdateUserNameDTO, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserAdminUpdateUserNamePost(adminUpdateUserNameDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserCurrentUserGet(options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserCurrentUserGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [code]
   * @param {number} [_2faId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserDelete2FAWithCodePost(code?: string, _2faId?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserDelete2FAWithCodePost(code, _2faId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [code]
   * @param {number} [_2faId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserDelete2FAWithRecoveryCodePost(code?: string, _2faId?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserDelete2FAWithRecoveryCodePost(code, _2faId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateUserDTO} [createUserDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserLoginPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserLoginPost(createUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [email]
   * @param {number} [code]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserLoginWithCodePost(email?: string, code?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserLoginWithCodePost(email, code, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateUserDTO} [createUserDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserRegisterPost(createUserDTO?: CreateUserDTO, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserRegisterPost(createUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserRevokeAllUserSessionsPost(id?: number, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserRevokeAllUserSessionsPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [code]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserSetup2FAPost(code?: string, name?: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserSetup2FAPost(code, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateNameDTO} [updateNameDTO]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public apiUserUpdateUserNamePost(updateNameDTO?: UpdateNameDTO, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .apiUserUpdateUserNamePost(updateNameDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
